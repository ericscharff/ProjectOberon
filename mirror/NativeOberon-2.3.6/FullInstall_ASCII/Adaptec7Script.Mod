(* OBERON System 3, Release 2.3.

Copyright 1999 ETH Zrich Institute for Computer Systems, 
ETH Center, CH-8092 Zrich. e-mail: oberon@inf.ethz.ch.

This module may be used under the conditions of the general Oberon 
System 3 license contract. The full text can be downloaded from

	"ftp://ftp.inf.ethz.ch/pub/software/Oberon/System3/license.txt;A"

Under the license terms stated it is in particular (a) prohibited to modify
the interface of this module in any way that disagrees with the style
or content of the system and (b) requested to provide all conversions
of the source code to another platform with the name OBERON. *)

MODULE Adaptec7Script;	(** prk  **)

(*
	Script for the Adaptec 7xxx sequencer.
	Taken from Linux (v 2.2.0)
	
	Ported by Patrik Reali (reali@acm.org), 30.3.99
*)


IMPORT
		SYSTEM;

TYPE
	Patch = RECORD f, begin, skipinstr, skippatch: LONGINT END;

VAR
	Patches: ARRAY 67 OF Patch;
	F: ARRAY 13 OF BOOLEAN;
	
	Base: LONGINT;		(* pointer to the program *)
	pc, patch: LONGINT;

PROCEDURE CorrectAddr(VAR line: SET);
VAR i, addr, Max: LONGINT;
BEGIN
	addr := SYSTEM.VAL(LONGINT, SYSTEM.LSH(line*{17..26}, -17));
	i := 0; Max := addr;
	WHILE Patches[i].begin < Max DO
		IF ~F[Patches[i].f] THEN	(*patch not active*)
			addr := addr - Patches[i].skipinstr;
			INC(i, Patches[i].skippatch)
		ELSE
			INC(i)
		END
	END;
	line := line - {17..26} + SYSTEM.VAL(SET, SYSTEM.LSH(addr, 17));
END CorrectAddr;

PROCEDURE LoadPatches;
VAR i: LONGINT;
	PROCEDURE SetPatch(func, line, skipadr, skippatch: LONGINT);
	BEGIN
		Patches[i].f := func;
		Patches[i].begin := line;
		Patches[i].skipinstr := skipadr;
		Patches[i].skippatch := skippatch;
		INC(i)
	END SetPatch;
BEGIN
	i := 0;
	SetPatch(1, 1, 1, 2);  SetPatch(0, 2, 1, 1);  SetPatch(2, 3, 2, 1);  SetPatch(3, 7, 1, 1);  
	SetPatch(3, 8, 1, 1);  SetPatch(4, 11, 4, 1);  SetPatch(5, 16, 3, 2);  SetPatch(0, 19, 4, 1);  
	SetPatch(6, 23, 1, 1);  SetPatch(7, 26, 1, 1);  SetPatch(4, 34, 4, 1);  SetPatch(8, 38, 3, 2);  
	SetPatch(0, 41, 3, 1);  SetPatch(9, 47, 7, 1);  SetPatch(4, 55, 3, 1);  SetPatch(8, 58, 2, 1);  
	SetPatch(1, 63, 60, 1);  SetPatch(8, 164, 1, 2);  SetPatch(0, 165, 1, 1);  SetPatch(2, 169, 1, 1);  
	SetPatch(2, 172, 1, 2);  SetPatch(0, 173, 2, 1);  SetPatch(10, 175, 1, 1);  SetPatch(8, 182, 1, 2);  
	SetPatch(0, 183, 3, 1);  SetPatch(8, 187, 1, 2);  SetPatch(0, 188, 1, 1);  SetPatch(8, 189, 7, 2);  
	SetPatch(0, 196, 1, 1);  SetPatch(2, 201, 13, 2);  SetPatch(0, 214, 8, 1);  SetPatch(10, 222, 1, 1);  
	SetPatch(8, 227, 1, 1);  SetPatch(8, 228, 1, 1);  SetPatch(8, 233, 1, 1);  SetPatch(8, 235, 2, 1);  
	SetPatch(8, 240, 8, 1);  SetPatch(8, 249, 1, 1);  SetPatch(2, 250, 2, 2);  SetPatch(0, 252, 4, 1);  
	SetPatch(10, 256, 2, 2);  SetPatch(0, 258, 1, 1);  SetPatch(11, 265, 1, 2);  SetPatch(0, 266, 1, 1);  
	SetPatch(5, 328, 1, 2);  SetPatch(0, 329, 1, 1);  SetPatch(3, 332, 1, 1);  SetPatch(11, 351, 1, 2);  
	SetPatch(0, 352, 1, 1);  SetPatch(6, 356, 1, 1);  SetPatch(7, 364, 3, 2);  SetPatch(0, 367, 1, 1);  
	SetPatch(1, 396, 3, 1);  SetPatch(10, 410, 1, 1);  SetPatch(2, 453, 7, 2);  SetPatch(0, 460, 8, 1);  
	SetPatch(2, 469, 4, 2);  SetPatch(0, 473, 6, 1);  SetPatch(2, 479, 4, 2);  SetPatch(0, 483, 3, 1);  
	SetPatch(2, 512, 17, 4);  SetPatch(12, 520, 4, 2);  SetPatch(0, 524, 2, 1);  SetPatch(0, 529, 33, 1);  
	SetPatch(6, 566, 2, 1);  SetPatch(6, 569, 9, 1);
	SetPatch(0, MAX(LONGINT), -1, -1);
END LoadPatches;

PROCEDURE SeqProgram(): LONGINT;
CODE {SYSTEM.i386}
	CALL L1
L1:
	POP EAX
	ADD EAX,8
	POP EBP
	RET
		(* sequencer program, from Linux  aic7xxx_seq.c*)
	DD  08066AFFH,  00006A32H,  00006A12H,  09D66AFFH
	DD  09DC6AFFH,  59386500H,  080201F7H,  08C84EFFH
	DD  08C060BFH,  687C0B60H,  680E0040H,  103E1F08H
	DD  687C0B60H,  680E0040H,  103E1F08H,  603E3EFFH
	DD  7810FA40H,  08D4F6FFH,  189C4E01H,  00C06040H
	DD  70104D00H,  189C4E01H,  08C060BFH,  5C726A00H
	DD  18C84EFFH,  5B886A02H,  092052FFH,  006A6A0DH
	DD  5BFE5200H,  09743EFFH,  087C90FFH,  09203EFFH
	DD  58446500H,  400E6500H,  08CA1FF7H,  08C8A108H
	DD  00CA6500H,  083E65FFH,  08C8A1F0H,  081E0F0FH
	DD  001E0F00H,  08C8A1F0H,  080A050FH,  000A0500H
	DD  04006A5AH,  00C86512H,  00020100H,  00CA6A31H
	DD  68643780H,  18CA65FFH,  08DC37FFH,  08C86EFFH
	DD  786C6C00H,  00020120H,  28C8374CH,  78741F08H
	DD  006E3708H,  00C86408H,  18CA6470H,  080A6CFFH
	DD  18CA6420H,  0C086CFFH,  69040B40H,  78F60B80H
	DD  00066AA4H,  00166A40H,  78F20310H,  08C850FFH
	DD  00CC6A88H,  5BEE6A49H,  01266A01H,  08CA6AFFH
	DD  00020108H,  78920B02H,  080201F7H,  08CC06FFH
	DD  093266FFH,  18CA6501H,  78A06680H,  08A266FFH
	DD  68900310H,  18C865FCH,  48A86500H,  01326AFFH
	DD  19186401H,  091A6AFFH,  091C6AFFH,  00066A84H
	DD  00020108H,  78B20B02H,  08C806FFH,  093264FFH
	DD  08CA6AFFH,  28C8645BH,  18C46200H,  18CA65FCH
	DD  08D46AFFH,  18CA65FAH,  08D46AFFH,  18CA6504H
	DD  18CA650BH,  08C865FFH,  19188C00H,  78CE0B02H
	DD  60D46501H,  080201F7H,  093206FFH,  18CA65FFH
	DD  68CE65FFH,  0126930AH,  5C646500H,  78E65140H
	DD  00066AE4H,  00020108H,  5B186A04H,  18A05001H
	DD  0E0EC5000H,  08A06AFFH,  013A6AFFH,  01226A02H
	DD  68F25140H,  08066AFFH,  400E6500H,  00166A20H
	DD  086E19F0H,  00186A08H,  00221108H,  585A6A08H
	DD  00686A08H,  41186500H,  00006A12H,  00166A40H
	DD  09203EFFH,  087CBAFFH,  086EA1FFH,  00186A08H
	DD  00221108H,  585A6A08H,  00686A80H,  006C3680H
	DD  5BD26500H,  08C83DFFH,  794864BFH,  71F06480H
	DD  720E64A0H,  720864C0H,  725264E0H,  01226A01H
	DD  41186500H,  082211F7H,  59386500H,  08D406FFH
	DD  080201F7H,  79320C09H,  680E0C08H,  01226A01H
	DD  09266AFFH,  08086AFFH,  080201DFH,  007A6A01H
	DD  0C6C3603H,  00CC6A08H,  5BE86AA9H,  41666500H
	DD  006A6AA8H,  006A6A79H,  69503D40H,  006A3504H
	DD  5B3A6500H,  01D46A80H,  69423610H,  006C3610H
	DD  3110AC07H,  00CC6A88H,  5BE06AACH,  5BDA6500H
	DD  0870A3FFH,  00CC6A39H,  5BE66AA4H,  697438FFH
	DD  00040280H,  086A35E7H,  31186903H,  00106AFFH
	DD  00126AFFH,  00146AFFH,  617A3801H,  01F8FC02H
	DD  086A35BFH,  08CA69FFH,  092635FFH,  697E0B04H
	DD  698A0B04H,  79800C10H,  69880B04H,  08CA6AFFH
	DD  5B223500H,  69D60280H,  79C865FFH,  187038FFH
	DD  79C838FFH,  61AAEA80H,  18C838EFH,  00C86A80H
	DD  499C6500H,  28C83833H,  09D064FFH,  31C03904H
	DD  01D66A09H,  79A2EB80H,  09D6EBF7H,  69A6EB08H
	DD  01D66A01H,  3110E908H,  00CC6A88H,  5BE66A39H
	DD  01186A08H,  091A6AFFH,  091C6AFFH,  0126930DH
	DD  5C646500H,  5C546A88H,  5BDA6500H,  08C86AFFH
	DD  18723908H,  20743A00H,  79660C10H,  01269380H
	DD  59E06500H,  095208FFH,  095409FFH,  09560AFFH
	DD  095038FFH,  00020112H,  41186500H,  59E06500H
	DD  00020112H,  0804027FH,  01226AE1H,  41186500H
	DD  69EA9304H,  092693DFH,  69E49320H,  01269302H
	DD  79E69401H,  092693D7H,  69EC9308H,  0CD46AFFH
	DD  5B3A6500H,  01F8FC02H,  3110B405H,  311A6A02H
	DD  00CC6A88H,  5BE46AB4H,  091A6AFFH,  091C6AFFH
	DD  5BDA6500H,  5B226A3DH,  5B226AACH,  41186500H
	DD  5B3A6500H,  094406FFH,  41186500H,  08CA34FFH
	DD  62326580H,  08CAA10FH,  08CAA107H,  08C8A040H
	DD  00CA6500H,  00CA6580H,  7A22A080H,  080C65FFH
	DD  42346500H,  7A3AA020H,  080C65FFH,  5BD26500H
	DD  62463DA0H,  080CA023H,  5BD26500H,  62463DA0H
	DD  423AB900H,  623A65FFH,  01226AA1H,  08D46AFFH
	DD  72465110H,  00186A40H,  080C65FFH,  5BD26500H
	DD  62463DA0H,  00063D10H,  420E6500H,  00186A40H
	DD  08A634FFH,  624E3480H,  0940A07FH,  00686A08H
	DD  41186500H,  5B126A64H,  6ABE6480H,  72A46404H
	DD  72AA6402H,  726C6A00H,  72BA6403H,  72A06401H
	DD  73006407H,  72686408H,  01226A11H,  5B046A07H
	DD  08D406FFH,  41186500H,  6A70A8FFH,  7A88A2FFH
	DD  006A6A01H,  5BFEB900H,  7A88A2FFH,  01226A71H
	DD  08D46AFFH,  62885140H,  006A6A0DH,  5BFEB900H
	DD  09743EFFH,  087C90FFH,  58446500H,  412A6500H
	DD  6A90A020H,  08C837FFH,  5BA86A00H,  5BBE6AFFH
	DD  08C8F8FFH,  08C84FFFH,  5BA86A01H,  5BBEB900H
	DD  189E4F01H,  01226A02H,  5C6C6500H,  412A6500H
	DD  01226A41H,  41186500H,  0140A004H,  5C846500H
	DD  412A6500H,  7A683610H,  094638FFH,  00CC6AA4H
	DD  5BE66A39H,  00CC6AACH,  5BE66A14H,  5BE86AA9H
	DD  42686500H,  086C36EFH,  42686500H,  08C8640FH
	DD  08C86407H,  006E3700H,  5B786500H,  72CE51FFH
	DD  7ADE3620H,  5B5C9000H,  42E06500H,  08D406FFH
	DD  5BD26500H,  62FA3DE0H,  62FA1220H,  5B086A51H
	DD  092051FFH,  7AFAA020H,  5B5C9000H,  5B566500H
	DD  08C837FFH,  62F2A100H,  7AF2A004H,  0940A0FBH
	DD  006C3680H,  7A68A080H,  0940A07FH,  5B046AFFH
	DD  42686500H,  7AF8A004H,  5C846500H,  42FA6500H
	DD  5C6C6500H,  01226A31H,  5B046A0CH,  42686500H
	DD  01226A61H,  42686500H,  00063D10H,  0C6865FFH
	DD  08D406FFH,  7B0A0C01H,  6B0A0C04H,  087A03E0H
	DD  631E3DE0H,  08CC65FFH,  0CDA12FFH,  0CD406FFH
	DD  080C65FFH,  7B1A0B02H,  0CD46AFFH,  01226AD1H
	DD  41186500H,  092665FFH,  6B320B01H,  7B240C10H
	DD  6B2C0B04H,  08CA6AFFH,  6B309304H,  7B2E9401H
	DD  6B309410H,  092693C7H,  08D499FFH,  6B349308H
	DD  0CD46AFFH,  6B383680H,  05226A21H,  092065FFH
	DD  634651FFH,  08C837FFH,  43506AA1H,  08C851FFH
	DD  43506AB9H,  7354BAFFH,  0920BAFFH,  18CA65FFH
	DD  634A6C00H,  0CCA90FFH,  04CA6AFFH,  7B723620H
	DD  5B3E9000H,  737265FFH,  7366BAFFH,  08CCBBFFH
	DD  0920BAFFH,  097666FFH,  092065FFH,  7370BBFFH
	DD  08CCBAFFH,  0920BBFFH,  097466FFH,  0D2065FFH
	DD  0C7EBAFFH,  5C726A00H,  006A6A0DH,  43FE5100H
	DD  73CC3FFFH,  00A26AFFH,  5B3E3F00H,  73CC65FFH
	DD  006C3620H,  6B86A020H,  0CA2B9FFH,  04A26AFFH
	DD  08A465FFH,  00CC6AE0H,  5BF26A45H,  01D06A01H
	DD  01D66A09H,  7B92EB80H,  01D66A01H,  34A4E901H
	DD  00CC6A88H,  5BF26A45H,  01186A01H,  091A6AFFH
	DD  091C6AFFH,  01266A0DH,  5C646500H,  0CA499FFH
	DD  08A465FFH,  00CC6AE0H,  5BF26A45H,  01D06A01H
	DD  05DC6A01H,  00CC6A88H,  5BF26A45H,  01186A01H
	DD  091A6AFFH,  091C6AFFH,  05266A01H,  31D86501H
	DD  01DCEE09H,  7BC2EE80H,  0DDC6AFFH,  093265FFH
	DD  0126930AH,  44646500H,  08C837FFH,  5B886A00H
	DD  0CA252FFH,  7BD20C01H,  6BD20C04H,  087A03E0H
	DD  0C063DFFH,  08108CFFH,  08128DFFH,  0C148EFFH
	DD  08DA6CFFH,  08DA6CFFH,  08DA6CFFH,  08DA6CFFH
	DD  08DA6CFFH,  08DA6CFFH,  0CDA6CFFH,  28A4643DH
	DD  28C86455H,  18DA6C00H,  08C852FFH,  20DA6C00H
	DD  08C86AFFH,  20DA6C00H,  24DA6C00H,  08C865FFH
	DD  00CC6AE0H,  5BEE6A41H,  09E290FFH,  01D06A20H
	DD  7C103504H,  01DC6A1DH,  640CEEDCH,  441C6500H
	DD  01DC6A01H,  31D8A020H,  01DCEE09H,  7C16EE80H
	DD  01DC6A19H,  641AEED8H,  09DC6AFFH,  6C1EEE18H
	DD  0CD46AFFH,  00CC6A88H,  5BEE6A41H,  01186A20H
	DD  091A6AFFH,  091C6AFFH,  092635FFH,  6C483504H
	DD  00CA6AA0H,  18C86520H,  09326CFFH,  09326CFFH
	DD  09326CFFH,  09326CFFH,  09326CFFH,  09326CFFH
	DD  09326CFFH,  09326CFFH,  64346500H,  0126930AH
	DD  5C646500H,  7B383504H,  5C546AA0H,  5C566500H
	DD  5C566500H,  44566500H,  08CC65FFH,  08DA99FFH
	DD  08DA99FFH,  08DA99FFH,  08DA99FFH,  08DA99FFH
	DD  08DA99FFH,  0CDA99FFH,  7C649408H,  092693F7H
	DD  6C689308H,  0CD46AFFH,  097440FFH,  088090FFH
	DD  05726AFFH,  648040FFH,  64783FFFH,  04CA6AFFH
	DD  09203FFFH,  006A6A01H,  5BFEB900H,  435C9000H
	DD  092040FFH,  0C80BAFFH,  01766AFFH,  09743FFFH
	DD  087E90FFH,  7338BAFFH,  0920BAFFH,  09763FFFH
	DD 0H
END SeqProgram;

PROCEDURE GetNext*(VAR line: SET): BOOLEAN;
VAR  opcode, c: LONGINT; parity: BOOLEAN;
BEGIN
	WHILE (Patches[patch].begin = pc) & ~F[Patches[patch].f](*Patches[patch].on*) DO	(*patch disabled, skip*)
		INC(pc, Patches[patch].skipinstr); INC(patch, Patches[patch].skippatch)
	END;
	
	IF Patches[patch].begin = pc THEN INC(patch) END;
	SYSTEM.GET(Base+pc*4, line);
	IF line # {} THEN
		opcode := SYSTEM.VAL(LONGINT, SYSTEM.LSH(line*{27..30}, -27));
		IF (8<=opcode) & (opcode<=0FH) THEN	(*patch jump addr*)
			CorrectAddr(line)
		END;
		                                                                                               
		IF (opcode # 5) & (31 IN line) THEN 	(*all but ROL, patch immediate*)
			line := line- {0..7, 31};	(*use dconst*)
		END;
		
		IF F[8](*Ultra2*) THEN
			parity := TRUE;
			FOR c := 0 TO 30 DO
				IF c IN line THEN parity := ~parity END
			END;
			IF parity THEN  INCL(line, 31)  END
		ELSIF (8<=opcode) & (opcode<=0FH) THEN	(*format3*)
			line := line*{0..16} + SYSTEM.LSH(line*{17..26}, -17+16) + SYSTEM.LSH(line*{27..30}, -27+25);
		ELSE	(*format1*)
			line := line*{0..16} + SYSTEM.LSH(line*{17..25}, -17+16) + SYSTEM.LSH(line*{26}, -26+24) + 
				SYSTEM.LSH(line*{27..30}, -27+25)
		END;
		INC(pc)
	END;
	RETURN line # {}
END GetNext;

PROCEDURE Init*(Ultra2, Ultra, Wide, Twin, PageSCB, QueueRegs, CmdChan: BOOLEAN);
BEGIN
	pc := 0; patch := 0;
	F[0] := FALSE;		(*defined like that!*)
	F[1] := FALSE;		(*target mode = TRUE, never used*)
	F[2] := CmdChan;
	F[3] := ~QueueRegs;
	F[4] := Twin;
	F[5] := QueueRegs;
	F[6] := PageSCB;
	F[7] := ~PageSCB;
	F[8] := Ultra2;
	F[9] := Ultra;
	F[10] := ~Ultra2;
	F[11] := Wide;
	F[12] := FALSE;	(*defined like that!*)
END Init;


BEGIN	Base := SeqProgram(); LoadPatches;
END Adaptec7Script.Test

