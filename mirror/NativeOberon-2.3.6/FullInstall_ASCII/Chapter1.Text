
Chapter One

Introduction and Design Principles





1.1	Introduction

Oberon is simultaneously the name of a programming language and of a modern operating system. The Oberon project [WG92] was started at the Swiss Federal Institute for Technology (ETH) in 1985 by Niklaus Wirth and Jrg Gutknecht. In addition to the software, hardware in the form of a general-purpose computer called Ceres [Ebe87] (based on the National Semiconductors 32000 processor family) was built to run the new operating system. After a period of internal ETH use for education, the decision was made to document the language and the operating system in a series of books, and to port the Oberon system to popular computer hardware where it would run natively or on top of the native operating system of the host. Today, the original Oberon system is available freely for many computer architectures.
	In 1991, Jrg Gutknecht continued the development of the operating system in a newly formed Oberon System 3 group [Gut94, Mar94]. The goal was to exploit the inherent features of Oberon to a much larger degree, upgrade the system by a concept of persistent objects, modernize the user interface and provide support for the ubiquitous network. In 1995, the Oberon System 3 Release 2.0 was finished. Concurrently with the development, the system was documented with a new set of hypertext-based tools. Since then, the system has been constantly improved and extended.
	This guide forms part of the documentation effort. It is addressed to users of the system and to programmers with Oberon language experience. The guide covers the current state of the project and is divided into user and programmer guides.


1.2	Design Principles

The underlying dynamic model of Oberon is extremely simple. There exists a single process acting as a common carrier of multiple tasks. This process repetitively interprets commands which are the entities of execution in Oberon. Commands are atomic actions operating on the global state of the system. Unlike customary interactive programs, they rigorously avoid direct dialogs with the system user; in other words, the system is completely non-modal. The following examples indicate the bandwidth covered by the concept of command: placing the caret, inserting a character into a text, selecting a piece of text or a visual object, deleting a selected piece of text, changing the font of a piece of text, compiling a software module, opening a document, backing up a sequence of files to diskette, displaying a directory, running a simulation or some other application. We emphasize that the execution of a command always results in non-volatile information. For example, a displayed directory is a text that might immediately undergo further processing. Typically, commands report the outcome of their execution in the form of an entry in the system log. Therefore, the log provides a protocol of the current session.
	Commands are initiated by input actions. Apart from a few universal operations, every input action is connected with a displayed visual object to which its further handling is delegated. A visual object in Oberon has a rectangular area that can display any kind of data. Most visual objects feature a thin frame often used for manipulating it. Any mouse-oriented input is handled by the visual object the mouse points to. Data from the keyboard is passed over to the current so-called focus object. An important feature of visual objects is that they are first class citizens, which means that they are deployed wherever required and are not bound to specific applications. As a practical example, we can insert a visual object like a line from a graphic editor into a text document, or vice-versa. Furthermore, we notice that command interpretation is a highly decentralized activity in Oberon and, as such, is a substantial contribution to what we consider as Oberon's most important quality, namely unlimited extensibility.
	Implementing a new object type is a very powerful but also quite far-reaching method to extend the Oberon system. A more modest way to increase the system's functionality consists of adding new commands operating on objects of an already existing class. A more ambitious extension could be the construction of a language compiler operating on text for example. We shall see that Oberon's open and coherent modular architecture provides effective support for that. Practically all system ingredients and resources are directly accessible and usable via modular interfaces on as high a level of abstraction as possible. This makes Oberon ideally suitable as a rapid development environment. Commands effectively replace conventional applications which have to be started. As commands operate on the shared system state and can be activated directly when required, it is simple to extend the system with new special-purpose commands. The programmer's guide will provide more insight into this topic.
	In addition to commands and visual objects, Oberon also supports non-visual objects for storing data, and documents for making collections of objects persistent. In fact, one of Oberon's biggest strengths is the large collection of prefabricated persistent objects, or components as we also refer to them. As the user can customize the system by combining objects together interactively at run-time, we also call our components end-user objects. End-user objects are maintained and managed in Oberon by the Gadgets framework and toolkit.
	We should deduce from the foregoing that there is no symbolic wall in Oberon separating actual users from developers. Users are encouraged to customize the system and tailor it to their individual needs either by modifying the tools and graphical application interfaces delivered with the system or by designing and implementing private commands and facilities. Little is "hardwired" in the system. However, there are several general conventions and existing tools, which are presented in the following user guides.
	Historically text as input and output medium plays a very important role in the Oberon system. The following chapter covers the textual user interface of the Oberon system, whereas the chapter titled the Gadgets User Interface gives more insight into its graphical user interface. Notice however that, from a technical point of view, text and text documents are just special cases of non-visual and visual objects respectively.


1.3	A tour through the chapters

Chapter 2 describes the textual user interface. It introduces the notion of command -- a unit of operation in Oberon. The use of the text editor and of the compiler is explained. Together, they form the principal tool for developing new software. Several software development tools and utility programs are described in the rest of this chapter.
	Chapter 3 describes the Gadgets user interface. In the Gadgets system, objects called "gadgets" are divided into visual gadgets and non-visual gadgets. In many cases, visual gadgets have the duty of visualizing the non-visual gadgets or models to which they are linked. The central topic is the interactive composition of gadgets. The next topic is devoted to Columbus, an indispensable GUI tool for inspecting and manipulating gadgets. Watson is an example of a composed gadget often needed for inspecting the definitions of modules installed on the system. A presentation of persistent objects and of libraries complete this chapter.
	Chapter 4 is devoted to the description of the gadgets delivered with the system.
	Chapter 5 explains how to program in Oberon. It starts with a description of the module hierarchy providing a sound basis for the construction of further system extensions. A detailed study of the text manipulation mechanisms follows. The next topic explains Oberon's display space structure and the hierarchy of the object types. The chapter continues with the study of the gadgets manipulation mechanism controlled by a special message protocol. An overview of a variety of design patterns which can be used in the construction of new gadgets of different types concludes the chapter. 
	Chapter 6 introduces the reader to some of the applications included in the system. One of them enables the construction of graphical user interfaces on the basis of a textual description written in the LayLa layout language. The TextPopups application facilitates the work of Oberon program developers, helping them to locate quickly commands, document names, procedure names and type names in source program texts.


1.4	System implementations

This system, together with its source code (under a general license agreement), is available as freeware. The current release which this book documents is called Oberon System 3 Release 2.2. It can be installed on various platforms, either on top of the operating system (Windows, Linux for Intel-based PC, MacOS for Macintosh) of the host machine or, in the case of Intel-based PCs, as native system. The complete material for all these platforms is available on the CD-ROM included in this book. The platform-specific hardware and software requirements together with installation instructions are described in readme files. Details on how to obtain the latest update for a specific platform are given in the Appendix C.
	PC Native Oberon is absolutely self-contained and makes no use of any alien software layer on Intel-based PCs. In a way, PC Native Oberon is to the PC what the original Oberon [WG92] was to the Ceres. For instance, it uses the same flat file directory structure found in the original Oberon. The three other implementations use the directory structure of their host operating system and the concept of a path for accessing an external storage medium.
	The diversity in the hardware has forced the implementors to adapt a number of system features and functions to the host hardware characteristics. The mouse type and the keyboard layout are of primary concern for the user controlling the system. The Oberon system is fine-tuned toward a 3-key mouse where a large number of functions can be activated by single mouse key clicks and interclick combinations. Accordingly, the system description is based on the assumption that a 3-key mouse is used. Not only have most Macintoshes a single button mouse, but many Intel-based PCs have a two-button mouse, so that the missing mouse keys have to be emulated by keyboard keys. The mapping of the mouse keys is depicted in Figure 1.1. In order to abstract the physical differences, the three mouse keys have been named ML, MM and MR.



Figure 1.1	Mouse varieties

If you are using a PC with a two-button mouse, use the Ctrl key at the left of the keyboard as a substitute for the missing MM key. If you are using a Macintosh with a single button mouse, use the left control key as the MM key and the alt key as the MR key.
	Interclicking means clicking (pressing and releasing) a second mouse key at an arbitrary time while the first key is being held down. In general, interclicking is an efficient and versatile tool to multiply the expressiveness of the mouse. In Oberon, interclicking is applied according to a systematic underlying pattern. You will find out more about this pattern soon.
